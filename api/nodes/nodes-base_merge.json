{
  "node_type": "nodes-base.merge",
  "display_name": "Merge",
  "description": "Merges data of multiple streams once data from both is available",
  "category": "transform",
  "development_style": "programmatic",
  "package_name": "n8n-nodes-base",
  "version": "3.2",
  "is_ai_tool": false,
  "is_trigger": false,
  "is_webhook": false,
  "is_versioned": true,
  "has_documentation": true,
  "documentation": "---\n#https://www.notion.so/n8n/Frontmatter-432c2b8dff1f43d4b1c8d20075510fe4\ntitle: Merge\ndescription: Documentation for the Merge node in n8n, a workflow automation platform. Includes guidance on usage, and links to examples.\ncontentType: [integration, reference]\npriority: critical\n---\n\n# Merge\n\nUse the Merge node to combine data from multiple streams, once data of all streams is available.\n\n/// note | Major changes in 0.194.0\nThe n8n team overhauled this node in n8n 0.194.0. This document reflects the latest version of the node. If you're using an older version of n8n, you can find the previous version of this document [here](https://github.com/n8n-io/n8n-docs/blob/4ff688642cc9ee7ca7d00987847bf4e4515da59d/docs/integrations/builtin/core-nodes/n8n-nodes-base.merge.md){:target=_blank .external-link}.\n///\n\n/// note | Minor changes in 1.49.0\nn8n version 1.49.0 introduced the option to add more than two inputs. Older versions only support up to two inputs. If you're running an older version and want to combine multiple inputs in these versions, use the [Code node](https://deploy-preview-2225--n8n-docs.netlify.app/code/code-node/).\n\nThe **Mode > SQL Query** feature was also added in n8n version 1.49.0 and isn't available in older versions.\n///\n\n## Node parameters\n\nYou can specify how the Merge node should combine data from different data streams by choosing a **Mode**: \n\n### Append\n\nKeep data from all inputs. Choose a **Number of Inputs** to output items of each input, one after another. The node waits for the execution of all connected inputs. \n\n<figure markdown=\"span\">\n![Sample Append mode inputs and output. Two separate data sources are on the left, one with items A, B, C and one with items D, E, F. The final data source combines both and lists A, B, C, D, E, F.](/_images/integrations/builtin/core-nodes/merge/append-diagram.png)\n<figcaption>Append mode inputs and output</figcaption>\n</figure>\n\n### Combine\n\nCombine data from two inputs. Select an option in **Combine By** to determine how you want to merge the input data.\n\n#### Matching Fields\n\nCompare items by field values. Enter the fields you want to compare in **Fields to Match**. \n\nn8n's default behavior is to keep matching items. You can change this using the **Output Type** setting:\n\n* **Keep Matches**: Merge items that match. This is like an inner join.\n* **Keep Non-Matches**: Merge items that don't match.\n* **Keep Everything**: Merge items together that do match and include items that don't match. This is like an outer join.\n* **Enrich Input 1**: Keep all data from Input 1, and add matching data from Input 2. This is like a left join.\n* **Enrich Input 2**: Keep all data from Input 2, and add matching data from Input 1. This is like a right join.\n\n<figure markdown=\"span\">\n![Sample Combine mode inputs and output. Two separate data sources are on the left. The final data source combines these data sources by matching fields.](/_images/integrations/builtin/core-nodes/merge/merge-by-field-diagram.png)\n<figcaption>Combine by Matching Fields mode inputs and output</figcaption>\n</figure>\n\n\n#### Position\n\nCombine items based on their order. The item at index 0 in Input 1 merges with the item at index 0 in Input 2, and so on.\n\n<figure markdown=\"span\">\n![Sample Combine mode inputs and output. Two separate data sources are on the left. The final data source combines these data sources by index position.](/_images/integrations/builtin/core-nodes/merge/merge-by-position-diagram.png)\n<figcaption>Combine by Position mode inputs and output</figcaption>\n</figure>\n\n\n#### All Possible Combinations\n\nOutput all possible item combinations, while merging fields with the same name.\n\n<figure markdown=\"span\">\n![Sample Combine mode inputs and output. Two separate data sources are on the left. The final data source combines these data sources by all possible combinations.](/_images/integrations/builtin/core-nodes/merge/multiplex-diagram.png)\n<figcaption>Combine by All Possible Combinations mode inputs and output</figcaption>\n</figure>\n\n#### Combine mode options\n\nWhen merging data by **Mode > Combine**, you can set these **Options**:\n\n* **Clash Handling**: Choose how to merge when data streams clash, or when there are sub-fields. Refer to [Clash handling](#clash-handling) for details.\n* **Fuzzy Compare**: Whether to tolerate type differences when comparing fields (enabled), or not (disabled, default). For example, when you enable this, n8n treats `\"3\"` and `3` as the same.\n* **Disable Dot Notation**: This prevents accessing child fields using `parent.child` in the field name.\n* **Multiple Matches**: Choose how n8n handles multiple matches when comparing data streams.\n    * **Include All Matches**: Output multiple items if there are multiple matches, one for each match.\n    * **Include First Match Only**: Keep the first item per match and discard the remaining multiple matches.\n* **Include Any Unpaired Items**: Choose whether to keep or discard unpaired items when merging by position. The default behavior is to leave out the items without a match. \n\n##### Clash Handling\n\n--8<-- \"_snippets/integrations/builtin/core-nodes/merge/field-value-clash.md\"\n\n### SQL Query\n\nWrite a custom SQL Query to merge the data. \n\nExample: \n```sql\nSELECT * FROM input1 LEFT JOIN input2 ON input1.name = input2.id\n```\n\nData from previous nodes are available as tables and you can use them in the SQL query as input1, input2, input3, and so on, based on their order. Refer to [AlaSQL GitHub page](https://github.com/alasql/alasql/wiki/Supported-SQL-statements){:target=_blank .external-link} for a full list of supported SQL statements. \n\n### Choose Branch\n\nChoose which input to keep. This option always waits until the data from both inputs is available. You can choose to **Output**:\n\n* The **Input 1 Data**\n* The **Input 2 Data**\n* **A Single, Empty Item**\n\nThe node outputs the data from the chosen input, without changing it.\n\n## Templates and examples\n\n<!-- see https://www.notion.so/n8n/Pull-in-templates-for-the-integrations-pages-37c716837b804d30a33b47475f6e3780 -->\n[[ templatesWidget(page.title, 'merge') ]]\n\n## Merging data streams with uneven numbers of items\n\nThe items passed into Input 1 of the Merge node will take precedence. For example, if the Merge node receives five items in Input 1 and 10 items in Input 2, it only processes five items. The remaining five items from Input 2 aren't processed.\n\n## Branch execution with If and Merge nodes\n\n--8<-- \"_snippets/integrations/builtin/core-nodes/merge/if-merge-branch-execution.md\"\n\n\n## Try it out: A step by step example\n\nCreate a workflow with some example input data to try out the Merge node.\n\n### Set up sample data using the Code nodes\n\n1. Add a Code node to the canvas and connect it to the Start node.\n2. Paste the following JavaScript code snippet in the **JavaScript Code** field:\n```js\nreturn [\n  {\n    json: {\n      name: 'Stefan',\n      language: 'de',\n    }\n  },\n  {\n    json: {\n      name: 'Jim',\n      language: 'en',\n    }\n  },\n  {\n    json: {\n      name: 'Hans',\n      language: 'de',\n    }\n  }\n];\n```\n3. Add a second Code node, and connect it to the Start node.\n4. Paste the following JavaScript code snippet in the **JavaScript Code** field:\n```js\nreturn [\n\t  {\n    json: {\n      greeting: 'Hello',\n      language: 'en',\n    }\n  },\n  {\n    json: {\n      greeting: 'Hallo',\n      language: 'de',\n    }\n  }\n];\n```\n\n### Try out different merge modes\n\nAdd the Merge node. Connect the first Code node to **Input 1**, and the second Code node to **Input 2**. Run the workflow to load data into the Merge node.\n\nThe final workflow should look like this:\n\n[[ workflowDemo(\"https://api.n8n.io/workflows/templates/655\") ]]\n\nNow try different options in **Mode** to see how it affects the output data.\n\n#### Append\n\nSelect **Mode** > **Append**, then select **Execute step**.\n\nYour output in table view should look like this:\n<!-- vale off -->\n| **name** | **language** | **greeting** |\n| --- | --- | --- |\n| Stefan | de |  |\n| Jim | en |  |\n| Hans | de |  |\n|   | en | Hello |\n|   | de | Hallo |\n<!-- vale on -->\n\n#### Combine by Matching Fields\n\nYou can merge these two data inputs so that each person gets the correct greeting for their language.\n\n1. Select **Mode** > **Combine**.\n2. Select **Combine by** > **Matching Fields**.\n3. In both **Input 1 Field** and **Input 2 Field**, enter `language`. This tells n8n to combine the data by matching the values in the `language` field in each data set.\n4. Select **Execute step**.\n\nYour output in table view should look like this:\n<!-- vale off -->\n\n| **name** | **language** | **greeting** |\n| --- | --- | --- |\n| Stefan | de | Hallo |\n| Jim | en | Hello  |\n| Hans | de | Hallo |\n<!-- vale on -->\n\n#### Combine by Position\n\nSelect **Mode** > **Combine**, **Combine by** > **Position**, then select **Execute step**.\n\nYour output in table view should look like this:\n<!-- vale off -->\n| **name** | **language** | **greeting** |\n| --- | --- | --- |\n| Stefan | en | Hello |\n| Jim | de | Hallo  |\n<!-- vale on -->\n\n##### Keep unpaired items\n\nIf you want to keep all items, select **Add Option** > **Include Any Unpaired Items**, then turn on **Include Any Unpaired Items**.\n\nYour output in table view should look like this:\n<!-- vale off -->\n| **name** | **language** | **greeting** |\n| --- | --- | --- |\n| Stefan | en | Hello |\n| Jim | de | Hallo  |\n| Hans | de |  |\n<!-- vale on -->\n\n#### Combine by All Possible Combinations \n\nSelect **Mode** > **Combine**, **Combine by** > **All Possible Combinations**, then select **Execute step**.\n\nYour output in table view should look like this:\n<!-- vale off -->\n| **name** | **language** | **greeting** |\n| --- | --- | --- |\n| Stefan | en | Hello |\n| Stefan | de | Hallo |\n| Jim | en | Hello  |\n| Jim | de | Hallo |\n| Hans | en | Hello |\n| Hans | de | Hallo |\n<!-- vale on -->\n",
  "properties_schema": [
    {
      "displayName": "Mode",
      "name": "mode",
      "type": "options",
      "default": "append",
      "description": "How input data should be merged",
      "options": [
        {
          "name": "Append",
          "value": "append",
          "description": "Output items of each input, one after the other"
        },
        {
          "name": "Combine",
          "value": "combine",
          "description": "Merge matching items together"
        },
        {
          "name": "SQL Query",
          "value": "combineBySql",
          "description": "Write a query to do the merge"
        },
        {
          "name": "Choose Branch",
          "value": "chooseBranch",
          "description": "Output data from a specific branch, without modifying it"
        }
      ],
      "noDataExpression": true
    },
    {
      "displayName": "Combine By",
      "name": "combineBy",
      "type": "options",
      "default": "combineByFields",
      "description": "How input data should be merged",
      "options": [
        {
          "name": "Matching Fields",
          "value": "combineByFields",
          "description": "Combine items with the same field values"
        },
        {
          "name": "Position",
          "value": "combineByPosition",
          "description": "Combine items based on their order"
        },
        {
          "name": "All Possible Combinations",
          "value": "combineAll",
          "description": "Every pairing of every two items (cross join)"
        }
      ],
      "displayOptions": {
        "show": {
          "mode": [
            "combine"
          ]
        }
      },
      "noDataExpression": true
    },
    {
      "displayName": "Number of Inputs",
      "name": "numberInputs",
      "type": "options",
      "default": 2,
      "description": "The number of data inputs you want to merge. The node waits for all connected inputs to be executed.",
      "options": [
        {
          "name": "2",
          "value": 2
        },
        {
          "name": "3",
          "value": 3
        },
        {
          "name": "4",
          "value": 4
        },
        {
          "name": "5",
          "value": 5
        },
        {
          "name": "6",
          "value": 6
        },
        {
          "name": "7",
          "value": 7
        },
        {
          "name": "8",
          "value": 8
        },
        {
          "name": "9",
          "value": 9
        },
        {
          "name": "10",
          "value": 10
        }
      ],
      "displayOptions": {
        "show": {
          "mode": [
            "append"
          ]
        }
      },
      "noDataExpression": true
    },
    {
      "displayName": "Options",
      "name": "options",
      "type": "collection",
      "default": {},
      "options": [
        {
          "displayName": "Clash Handling",
          "name": "clashHandling",
          "type": "fixedCollection",
          "default": {
            "values": {
              "resolveClash": "preferLast",
              "mergeMode": "deepMerge",
              "overrideEmpty": false
            }
          },
          "options": [
            {
              "displayName": "Values",
              "name": "values",
              "values": [
                {
                  "displayName": "When Field Values Clash",
                  "name": "resolveClash",
                  "type": "options",
                  "default": "",
                  "typeOptions": {
                    "loadOptionsMethod": "getResolveClashOptions",
                    "loadOptionsDependsOn": [
                      "numberInputs"
                    ]
                  }
                },
                {
                  "displayName": "Merging Nested Fields",
                  "name": "mergeMode",
                  "type": "options",
                  "default": "deepMerge",
                  "options": [
                    {
                      "name": "Deep Merge",
                      "value": "deepMerge",
                      "description": "Merge at every level of nesting"
                    },
                    {
                      "name": "Shallow Merge",
                      "value": "shallowMerge",
                      "description": "Merge at the top level only (all nested fields will come from the same input)"
                    }
                  ],
                  "hint": "How to merge when there are sub-fields below the top-level ones",
                  "displayOptions": {
                    "show": {
                      "resolveClash": [
                        {
                          "_cnd": {
                            "not": "addSuffix"
                          }
                        }
                      ]
                    }
                  }
                },
                {
                  "displayName": "Minimize Empty Fields",
                  "name": "overrideEmpty",
                  "type": "boolean",
                  "default": false,
                  "description": "Whether to override the preferred input version for a field if it is empty and the other version isn't. Here 'empty' means undefined, null or an empty string.",
                  "displayOptions": {
                    "show": {
                      "resolveClash": [
                        {
                          "_cnd": {
                            "not": "addSuffix"
                          }
                        }
                      ]
                    }
                  }
                }
              ]
            }
          ]
        },
        {
          "displayName": "Fuzzy Compare",
          "name": "fuzzyCompare",
          "type": "boolean",
          "default": false,
          "description": "Whether to tolerate small type differences when comparing fields. E.g. the number 3 and the string '3' are treated as the same."
        }
      ],
      "displayOptions": {
        "show": {
          "mode": [
            "combine"
          ],
          "combineBy": [
            "combineAll"
          ]
        }
      }
    },
    {
      "displayName": "Fields To Match Have Different Names",
      "name": "advanced",
      "type": "boolean",
      "default": false,
      "description": "Whether name(s) of field to match are different in input 1 and input 2",
      "displayOptions": {
        "show": {
          "mode": [
            "combine"
          ],
          "combineBy": [
            "combineByFields"
          ]
        }
      }
    },
    {
      "displayName": "Fields to Match",
      "name": "fieldsToMatchString",
      "type": "string",
      "default": "",
      "description": "Specify the fields to use for matching input items",
      "displayOptions": {
        "show": {
          "advanced": [
            false
          ],
          "mode": [
            "combine"
          ],
          "combineBy": [
            "combineByFields"
          ]
        }
      }
    },
    {
      "displayName": "Fields to Match",
      "name": "mergeByFields",
      "type": "fixedCollection",
      "default": {
        "values": [
          {
            "field1": "",
            "field2": ""
          }
        ]
      },
      "description": "Specify the fields to use for matching input items",
      "options": [
        {
          "displayName": "Values",
          "name": "values",
          "values": [
            {
              "displayName": "Input 1 Field",
              "name": "field1",
              "type": "string",
              "default": "",
              "placeholder": "e.g. id",
              "hint": "Drag or type the input field name",
              "requiresDataPath": "single"
            },
            {
              "displayName": "Input 2 Field",
              "name": "field2",
              "type": "string",
              "default": "",
              "placeholder": "e.g. id",
              "hint": "Drag or type the input field name",
              "requiresDataPath": "single"
            }
          ]
        }
      ],
      "displayOptions": {
        "show": {
          "advanced": [
            true
          ],
          "mode": [
            "combine"
          ],
          "combineBy": [
            "combineByFields"
          ]
        }
      },
      "typeOptions": {
        "multipleValues": true
      }
    },
    {
      "displayName": "Output Type",
      "name": "joinMode",
      "type": "options",
      "default": "keepMatches",
      "description": "How to select the items to send to output",
      "options": [
        {
          "name": "Keep Matches",
          "value": "keepMatches",
          "description": "Items that match, merged together (inner join)"
        },
        {
          "name": "Keep Non-Matches",
          "value": "keepNonMatches",
          "description": "Items that don't match"
        },
        {
          "name": "Keep Everything",
          "value": "keepEverything",
          "description": "Items that match merged together, plus items that don't match (outer join)"
        },
        {
          "name": "Enrich Input 1",
          "value": "enrichInput1",
          "description": "All of input 1, with data from input 2 added in (left join)"
        },
        {
          "name": "Enrich Input 2",
          "value": "enrichInput2",
          "description": "All of input 2, with data from input 1 added in (right join)"
        }
      ],
      "displayOptions": {
        "show": {
          "mode": [
            "combine"
          ],
          "combineBy": [
            "combineByFields"
          ]
        }
      }
    },
    {
      "displayName": "Output Data From",
      "name": "outputDataFrom",
      "type": "options",
      "default": "both",
      "options": [
        {
          "name": "Both Inputs Merged Together",
          "value": "both"
        },
        {
          "name": "Input 1",
          "value": "input1"
        },
        {
          "name": "Input 2",
          "value": "input2"
        }
      ],
      "displayOptions": {
        "show": {
          "joinMode": [
            "keepMatches"
          ],
          "mode": [
            "combine"
          ],
          "combineBy": [
            "combineByFields"
          ]
        }
      }
    },
    {
      "displayName": "Output Data From",
      "name": "outputDataFrom",
      "type": "options",
      "default": "both",
      "options": [
        {
          "name": "Both Inputs Appended Together",
          "value": "both"
        },
        {
          "name": "Input 1",
          "value": "input1"
        },
        {
          "name": "Input 2",
          "value": "input2"
        }
      ],
      "displayOptions": {
        "show": {
          "joinMode": [
            "keepNonMatches"
          ],
          "mode": [
            "combine"
          ],
          "combineBy": [
            "combineByFields"
          ]
        }
      }
    },
    {
      "displayName": "Options",
      "name": "options",
      "type": "collection",
      "default": {},
      "options": [
        {
          "displayName": "Clash Handling",
          "name": "clashHandling",
          "type": "fixedCollection",
          "default": {
            "values": {
              "resolveClash": "preferLast",
              "mergeMode": "deepMerge",
              "overrideEmpty": false
            }
          },
          "options": [
            {
              "displayName": "Values",
              "name": "values",
              "values": [
                {
                  "displayName": "When Field Values Clash",
                  "name": "resolveClash",
                  "type": "options",
                  "default": "",
                  "typeOptions": {
                    "loadOptionsMethod": "getResolveClashOptions",
                    "loadOptionsDependsOn": [
                      "numberInputs"
                    ]
                  }
                },
                {
                  "displayName": "Merging Nested Fields",
                  "name": "mergeMode",
                  "type": "options",
                  "default": "deepMerge",
                  "options": [
                    {
                      "name": "Deep Merge",
                      "value": "deepMerge",
                      "description": "Merge at every level of nesting"
                    },
                    {
                      "name": "Shallow Merge",
                      "value": "shallowMerge",
                      "description": "Merge at the top level only (all nested fields will come from the same input)"
                    }
                  ],
                  "hint": "How to merge when there are sub-fields below the top-level ones",
                  "displayOptions": {
                    "show": {
                      "resolveClash": [
                        {
                          "_cnd": {
                            "not": "addSuffix"
                          }
                        }
                      ]
                    }
                  }
                },
                {
                  "displayName": "Minimize Empty Fields",
                  "name": "overrideEmpty",
                  "type": "boolean",
                  "default": false,
                  "description": "Whether to override the preferred input version for a field if it is empty and the other version isn't. Here 'empty' means undefined, null or an empty string.",
                  "displayOptions": {
                    "show": {
                      "resolveClash": [
                        {
                          "_cnd": {
                            "not": "addSuffix"
                          }
                        }
                      ]
                    }
                  }
                }
              ]
            }
          ],
          "displayOptions": {
            "hide": {
              "/joinMode": [
                "keepMatches",
                "keepNonMatches"
              ]
            }
          }
        },
        {
          "displayName": "Clash Handling",
          "name": "clashHandling",
          "type": "fixedCollection",
          "default": {
            "values": {
              "resolveClash": "preferLast",
              "mergeMode": "deepMerge",
              "overrideEmpty": false
            }
          },
          "options": [
            {
              "displayName": "Values",
              "name": "values",
              "values": [
                {
                  "displayName": "When Field Values Clash",
                  "name": "resolveClash",
                  "type": "options",
                  "default": "",
                  "typeOptions": {
                    "loadOptionsMethod": "getResolveClashOptions",
                    "loadOptionsDependsOn": [
                      "numberInputs"
                    ]
                  }
                },
                {
                  "displayName": "Merging Nested Fields",
                  "name": "mergeMode",
                  "type": "options",
                  "default": "deepMerge",
                  "options": [
                    {
                      "name": "Deep Merge",
                      "value": "deepMerge",
                      "description": "Merge at every level of nesting"
                    },
                    {
                      "name": "Shallow Merge",
                      "value": "shallowMerge",
                      "description": "Merge at the top level only (all nested fields will come from the same input)"
                    }
                  ],
                  "hint": "How to merge when there are sub-fields below the top-level ones",
                  "displayOptions": {
                    "show": {
                      "resolveClash": [
                        {
                          "_cnd": {
                            "not": "addSuffix"
                          }
                        }
                      ]
                    }
                  }
                },
                {
                  "displayName": "Minimize Empty Fields",
                  "name": "overrideEmpty",
                  "type": "boolean",
                  "default": false,
                  "description": "Whether to override the preferred input version for a field if it is empty and the other version isn't. Here 'empty' means undefined, null or an empty string.",
                  "displayOptions": {
                    "show": {
                      "resolveClash": [
                        {
                          "_cnd": {
                            "not": "addSuffix"
                          }
                        }
                      ]
                    }
                  }
                }
              ]
            }
          ],
          "displayOptions": {
            "show": {
              "/joinMode": [
                "keepMatches"
              ],
              "/outputDataFrom": [
                "both"
              ]
            }
          }
        },
        {
          "displayName": "Disable Dot Notation",
          "name": "disableDotNotation",
          "type": "boolean",
          "default": false,
          "description": "Whether to disallow referencing child fields using `parent.child` in the field name"
        },
        {
          "displayName": "Fuzzy Compare",
          "name": "fuzzyCompare",
          "type": "boolean",
          "default": false,
          "description": "Whether to tolerate small type differences when comparing fields. E.g. the number 3 and the string '3' are treated as the same."
        },
        {
          "displayName": "Multiple Matches",
          "name": "multipleMatches",
          "type": "options",
          "default": "all",
          "options": [
            {
              "name": "Include All Matches",
              "value": "all",
              "description": "Output multiple items if there are multiple matches"
            },
            {
              "name": "Include First Match Only",
              "value": "first",
              "description": "Only ever output a single item per match"
            }
          ],
          "displayOptions": {
            "show": {
              "/joinMode": [
                "keepMatches"
              ],
              "/outputDataFrom": [
                "both"
              ]
            }
          }
        },
        {
          "displayName": "Multiple Matches",
          "name": "multipleMatches",
          "type": "options",
          "default": "all",
          "options": [
            {
              "name": "Include All Matches",
              "value": "all",
              "description": "Output multiple items if there are multiple matches"
            },
            {
              "name": "Include First Match Only",
              "value": "first",
              "description": "Only ever output a single item per match"
            }
          ],
          "displayOptions": {
            "show": {
              "/joinMode": [
                "enrichInput1",
                "enrichInput2",
                "keepEverything"
              ]
            }
          }
        }
      ],
      "displayOptions": {
        "show": {
          "mode": [
            "combine"
          ],
          "combineBy": [
            "combineByFields"
          ]
        }
      }
    },
    {
      "displayName": "Number of Inputs",
      "name": "numberInputs",
      "type": "options",
      "default": 2,
      "description": "The number of data inputs you want to merge. The node waits for all connected inputs to be executed.",
      "options": [
        {
          "name": "2",
          "value": 2
        },
        {
          "name": "3",
          "value": 3
        },
        {
          "name": "4",
          "value": 4
        },
        {
          "name": "5",
          "value": 5
        },
        {
          "name": "6",
          "value": 6
        },
        {
          "name": "7",
          "value": 7
        },
        {
          "name": "8",
          "value": 8
        },
        {
          "name": "9",
          "value": 9
        },
        {
          "name": "10",
          "value": 10
        }
      ],
      "displayOptions": {
        "show": {
          "mode": [
            "combineBySql"
          ]
        }
      },
      "noDataExpression": true
    },
    {
      "displayName": "Query",
      "name": "query",
      "type": "string",
      "default": "SELECT * FROM input1 LEFT JOIN input2 ON input1.name = input2.id",
      "description": "Input data available as tables with corresponding number, e.g. input1, input2",
      "required": true,
      "displayOptions": {
        "show": {
          "mode": [
            "combineBySql"
          ]
        }
      },
      "typeOptions": {
        "rows": 5,
        "editor": "sqlEditor"
      },
      "noDataExpression": true
    },
    {
      "displayName": "Options",
      "name": "options",
      "type": "collection",
      "default": {},
      "options": [
        {
          "displayName": "Empty Query Result",
          "name": "emptyQueryResult",
          "type": "options",
          "description": "What to return if the query executed successfully but returned no results",
          "options": [
            {
              "name": "Success",
              "value": "success"
            },
            {
              "name": "Empty Result",
              "value": "empty"
            }
          ],
          "default": "empty"
        }
      ],
      "displayOptions": {
        "show": {
          "@version": [
            3.2
          ],
          "mode": [
            "combineBySql"
          ]
        }
      }
    },
    {
      "displayName": "Number of Inputs",
      "name": "numberInputs",
      "type": "options",
      "default": 2,
      "description": "The number of data inputs you want to merge. The node waits for all connected inputs to be executed.",
      "options": [
        {
          "name": "2",
          "value": 2
        },
        {
          "name": "3",
          "value": 3
        },
        {
          "name": "4",
          "value": 4
        },
        {
          "name": "5",
          "value": 5
        },
        {
          "name": "6",
          "value": 6
        },
        {
          "name": "7",
          "value": 7
        },
        {
          "name": "8",
          "value": 8
        },
        {
          "name": "9",
          "value": 9
        },
        {
          "name": "10",
          "value": 10
        }
      ],
      "displayOptions": {
        "show": {
          "mode": [
            "combine"
          ],
          "combineBy": [
            "combineByPosition"
          ]
        }
      },
      "noDataExpression": true
    },
    {
      "displayName": "Options",
      "name": "options",
      "type": "collection",
      "default": {},
      "options": [
        {
          "displayName": "Clash Handling",
          "name": "clashHandling",
          "type": "fixedCollection",
          "default": {
            "values": {
              "resolveClash": "addSuffix"
            }
          },
          "options": [
            {
              "displayName": "Values",
              "name": "values",
              "values": [
                {
                  "displayName": "When Field Values Clash",
                  "name": "resolveClash",
                  "type": "options",
                  "default": "",
                  "typeOptions": {
                    "loadOptionsMethod": "getResolveClashOptions",
                    "loadOptionsDependsOn": [
                      "numberInputs"
                    ]
                  }
                },
                {
                  "displayName": "Merging Nested Fields",
                  "name": "mergeMode",
                  "type": "options",
                  "default": "deepMerge",
                  "options": [
                    {
                      "name": "Deep Merge",
                      "value": "deepMerge",
                      "description": "Merge at every level of nesting"
                    },
                    {
                      "name": "Shallow Merge",
                      "value": "shallowMerge",
                      "description": "Merge at the top level only (all nested fields will come from the same input)"
                    }
                  ],
                  "hint": "How to merge when there are sub-fields below the top-level ones",
                  "displayOptions": {
                    "show": {
                      "resolveClash": [
                        {
                          "_cnd": {
                            "not": "addSuffix"
                          }
                        }
                      ]
                    }
                  }
                },
                {
                  "displayName": "Minimize Empty Fields",
                  "name": "overrideEmpty",
                  "type": "boolean",
                  "default": false,
                  "description": "Whether to override the preferred input version for a field if it is empty and the other version isn't. Here 'empty' means undefined, null or an empty string.",
                  "displayOptions": {
                    "show": {
                      "resolveClash": [
                        {
                          "_cnd": {
                            "not": "addSuffix"
                          }
                        }
                      ]
                    }
                  }
                }
              ]
            }
          ]
        },
        {
          "displayName": "Include Any Unpaired Items",
          "name": "includeUnpaired",
          "type": "boolean",
          "default": false,
          "description": "Whether unpaired items should be included in the result when there are differing numbers of items among the inputs"
        }
      ],
      "displayOptions": {
        "show": {
          "mode": [
            "combine"
          ],
          "combineBy": [
            "combineByPosition"
          ]
        }
      }
    },
    {
      "displayName": "Number of Inputs",
      "name": "numberInputs",
      "type": "options",
      "default": 2,
      "description": "The number of data inputs you want to merge. The node waits for all connected inputs to be executed.",
      "options": [
        {
          "name": "2",
          "value": 2
        },
        {
          "name": "3",
          "value": 3
        },
        {
          "name": "4",
          "value": 4
        },
        {
          "name": "5",
          "value": 5
        },
        {
          "name": "6",
          "value": 6
        },
        {
          "name": "7",
          "value": 7
        },
        {
          "name": "8",
          "value": 8
        },
        {
          "name": "9",
          "value": 9
        },
        {
          "name": "10",
          "value": 10
        }
      ],
      "displayOptions": {
        "show": {
          "mode": [
            "chooseBranch"
          ]
        }
      },
      "noDataExpression": true
    },
    {
      "displayName": "Output Type",
      "name": "chooseBranchMode",
      "type": "options",
      "default": "waitForAll",
      "options": [
        {
          "name": "Wait for All Inputs to Arrive",
          "value": "waitForAll"
        }
      ],
      "displayOptions": {
        "show": {
          "mode": [
            "chooseBranch"
          ]
        }
      }
    },
    {
      "displayName": "Output",
      "name": "output",
      "type": "options",
      "default": "specifiedInput",
      "options": [
        {
          "name": "Data of Specified Input",
          "value": "specifiedInput"
        },
        {
          "name": "A Single, Empty Item",
          "value": "empty"
        }
      ],
      "displayOptions": {
        "show": {
          "chooseBranchMode": [
            "waitForAll"
          ],
          "mode": [
            "chooseBranch"
          ]
        }
      }
    },
    {
      "displayName": "Use Data of Input",
      "name": "useDataOfInput",
      "type": "options",
      "default": 1,
      "description": "The number of the input to use data of",
      "displayOptions": {
        "show": {
          "output": [
            "specifiedInput"
          ],
          "mode": [
            "chooseBranch"
          ]
        }
      },
      "typeOptions": {
        "minValue": 1,
        "loadOptionsMethod": "getInputs",
        "loadOptionsDependsOn": [
          "numberInputs"
        ]
      }
    }
  ],
  "operations": [],
  "credentials_required": [],
  "generated_at": "2025-07-23T02:24:21.980Z",
  "api_version": "1.0.0"
}