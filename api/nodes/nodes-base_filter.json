{
  "node_type": "nodes-base.filter",
  "display_name": "Filter",
  "description": "Remove items matching a condition",
  "category": "transform",
  "development_style": "programmatic",
  "package_name": "n8n-nodes-base",
  "version": "2.2",
  "is_ai_tool": false,
  "is_trigger": false,
  "is_webhook": false,
  "is_versioned": true,
  "has_documentation": true,
  "documentation": "---\n#https://www.notion.so/n8n/Frontmatter-432c2b8dff1f43d4b1c8d20075510fe4\ntitle: Filter\ndescription: Documentation for the Filter node in n8n, a workflow automation platform. Includes guidance on usage, and links to examples.\ncontentType: [integration, reference]\npriority: critical\n---\n\n# Filter\n\nFilter items based on a condition. If the item meets the condition, the Filter node passes it on to the next node in the Filter node output. If the item doesn't meet the condition, the Filter node omits the item from its output.\n\n## Node parameters\n\nCreate filter comparison **Conditions** to perform your filter.\n\n- Use the data type dropdown to select the data type and comparison operation type for your condition. For example, to filter for dates after a particular date, select **Date & Time > is after**.\n- The fields and values to enter into the condition change based on the data type and comparison you select. Refer to [Available data type comparisons](#available-data-type-comparisons) for a full list of all comparisons by data type.\n\nSelect **Add condition** to create more conditions.\n\n### Combining conditions\n\nYou can choose to keep items:\n\n* When they meet all conditions: Create two or more conditions and select **AND** in the dropdown between them.\n* When they meet any of the conditions: Create two or more conditions and select **OR** in the dropdown between them.\n\nYou can't create a mix of AND and OR rules.\n\n## Node options\n\n- **Ignore Case**: Whether to ignore letter case (turned on) or be case sensitive (turned off).\n- **Less Strict Type Validation**: Whether you want n8n to attempt to convert value types based on the operator you choose (turned on) or not (turned off). Turn this on when facing a \"wrong type:\" error in your node.\n\n## Templates and examples\n\n<!-- see https://www.notion.so/n8n/Pull-in-templates-for-the-integrations-pages-37c716837b804d30a33b47475f6e3780 -->\n[[ templatesWidget(page.title, 'filter') ]]\n\n--8<-- \"_snippets/integrations/builtin/core-nodes/data-types.md\"\n",
  "properties_schema": [
    {
      "displayName": "Conditions",
      "name": "conditions",
      "type": "filter",
      "default": {},
      "typeOptions": {
        "filter": {
          "caseSensitive": "={{!$parameter.options.ignoreCase}}",
          "typeValidation": "={{ ($nodeVersion < 2.1 ? $parameter.options.looseTypeValidation :  $parameter.looseTypeValidation) ? \"loose\" : \"strict\" }}",
          "version": "={{ $nodeVersion >= 2.2 ? 2 : 1 }}"
        }
      }
    },
    {
      "displayName": "Convert types where required",
      "name": "looseTypeValidation",
      "type": "boolean",
      "default": false,
      "description": "If the type of an expression doesn't match the type of the comparison, n8n will try to cast the expression to the required type. E.g. for booleans <code>\"false\"</code> or <code>0</code> will be cast to <code>false</code>",
      "displayOptions": {
        "show": {
          "@version": [
            {
              "_cnd": {
                "gte": 2.1
              }
            }
          ]
        }
      }
    },
    {
      "displayName": "Options",
      "name": "options",
      "type": "collection",
      "default": {},
      "options": [
        {
          "displayName": "Ignore Case",
          "description": "Whether to ignore letter case when evaluating conditions",
          "name": "ignoreCase",
          "type": "boolean",
          "default": true
        },
        {
          "displayName": "Convert types where required",
          "description": "If the type of an expression doesn't match the type of the comparison, n8n will try to cast the expression to the required type. E.g. for booleans <code>\"false\"</code> or <code>0</code> will be cast to <code>false</code>",
          "name": "looseTypeValidation",
          "type": "boolean",
          "default": true,
          "displayOptions": {
            "show": {
              "@version": [
                {
                  "_cnd": {
                    "lt": 2.1
                  }
                }
              ]
            }
          }
        }
      ]
    }
  ],
  "operations": [],
  "credentials_required": [],
  "generated_at": "2025-07-23T02:24:21.834Z",
  "api_version": "1.0.0"
}