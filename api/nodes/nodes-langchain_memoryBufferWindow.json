{
  "node_type": "nodes-langchain.memoryBufferWindow",
  "display_name": "Simple Memory",
  "description": "Stores in n8n memory, so no credentials required",
  "category": "transform",
  "development_style": "programmatic",
  "package_name": "@n8n/n8n-nodes-langchain",
  "version": "1.3",
  "is_ai_tool": false,
  "is_trigger": false,
  "is_webhook": false,
  "is_versioned": true,
  "has_documentation": true,
  "documentation": "---\n#https://www.notion.so/n8n/Frontmatter-432c2b8dff1f43d4b1c8d20075510fe4\ntitle: Simple Memory node documentation\ndescription: Learn how to use the Simple Memory node in n8n. Follow technical documentation to integrate Simple Memory node into your workflows.\ncontentType: [integration, reference]\npriority: high\n---\n\n# Simple Memory node\n\nUse the Simple Memory node to [persist](/glossary.md#ai-memory) chat history in your workflow.\n\nOn this page, you'll find a list of operations the Simple Memory node supports, and links to more resources.\n\n/// warning | Don't use this node if running n8n in queue mode\nIf your n8n instance uses [queue mode](/hosting/scaling/queue-mode.md), this node doesn't work in an active production workflow. This is because n8n can't guarantee that every call to Simple Memory will go to the same worker.\n///\n\n--8<-- \"_snippets/integrations/builtin/cluster-nodes/sub-node-expression-resolution.md\"\n\n## Node parameters\n\nConfigure these parameters to configure the node:\n\n* **Session Key**: Enter the key to use to store the memory in the workflow data.\n* **Context Window Length**: Enter the number of previous interactions to consider for context.\n\n## Templates and examples\n\n<!-- see https://www.notion.so/n8n/Pull-in-templates-for-the-integrations-pages-37c716837b804d30a33b47475f6e3780 -->\n[[ templatesWidget(page.title, 'window-buffer-memory') ]]\n\n## Related resources\n\nRefer to [LangChain's Buffer Window Memory documentation](https://v03.api.js.langchain.com/classes/langchain.memory.BufferWindowMemory.html){:target=_blank .external-link} for more information about the service.\n\n--8<-- \"_snippets/integrations/builtin/cluster-nodes/langchain-overview-link.md\"\n\n## Common issues\n\nFor common questions or issues and suggested solutions, refer to [Common issues](/integrations/builtin/cluster-nodes/sub-nodes/n8n-nodes-langchain.memorybufferwindow/common-issues.md).\n\n--8<-- \"_glossary/ai-glossary.md\"\n",
  "properties_schema": [
    {
      "displayName": "This node must be connected to an AI agent. <a data-action='openSelectiveNodeCreator' data-action-parameter-creatorview='AI'>Insert one</a>",
      "name": "notice",
      "type": "notice",
      "default": "",
      "typeOptions": {
        "containerClass": "ndv-connection-hint-notice"
      }
    },
    {
      "displayName": "Session Key",
      "name": "sessionKey",
      "type": "string",
      "default": "chat_history",
      "description": "The key to use to store the memory in the workflow data",
      "displayOptions": {
        "show": {
          "@version": [
            1
          ]
        }
      }
    },
    {
      "displayName": "Session ID",
      "name": "sessionKey",
      "type": "string",
      "default": "={{ $json.sessionId }}",
      "description": "The key to use to store the memory",
      "displayOptions": {
        "show": {
          "@version": [
            1.1
          ]
        }
      }
    },
    {
      "displayName": "Session ID",
      "name": "sessionIdType",
      "type": "options",
      "default": "fromInput",
      "options": [
        {
          "name": "Connected Chat Trigger Node",
          "value": "fromInput",
          "description": "Looks for an input field called 'sessionId' that is coming from a directly connected Chat Trigger"
        },
        {
          "name": "Define below",
          "value": "customKey",
          "description": "Use an expression to reference data in previous nodes or enter static text"
        }
      ],
      "displayOptions": {
        "show": {
          "@version": [
            {
              "_cnd": {
                "gte": 1.2
              }
            }
          ]
        }
      }
    },
    {
      "displayName": "Session Key From Previous Node",
      "name": "sessionKey",
      "type": "string",
      "default": "={{ $json.sessionId }}",
      "displayOptions": {
        "show": {
          "sessionIdType": [
            "fromInput"
          ],
          "@version": [
            {
              "_cnd": {
                "gte": 1.3
              }
            }
          ]
        }
      }
    },
    {
      "displayName": "Key",
      "name": "sessionKey",
      "type": "string",
      "default": "",
      "description": "The key to use to store session ID in the memory",
      "displayOptions": {
        "show": {
          "sessionIdType": [
            "customKey"
          ]
        }
      }
    },
    {
      "displayName": "Context Window Length",
      "name": "contextWindowLength",
      "type": "number",
      "default": 5
    }
  ],
  "operations": [],
  "credentials_required": [],
  "generated_at": "2025-07-23T02:24:22.270Z",
  "api_version": "1.0.0"
}