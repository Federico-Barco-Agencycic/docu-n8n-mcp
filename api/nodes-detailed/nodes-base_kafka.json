{
  "node_type": "nodes-base.kafka",
  "package_name": "n8n-nodes-base",
  "display_name": "Kafka",
  "description": "Sends messages to a Kafka topic",
  "category": "transform",
  "development_style": "programmatic",
  "is_ai_tool": 1,
  "is_trigger": 0,
  "is_webhook": 0,
  "is_versioned": 0,
  "version": "1",
  "documentation": "---\n#https://www.notion.so/n8n/Frontmatter-432c2b8dff1f43d4b1c8d20075510fe4\ntitle: Kafka node documentation\ndescription: Learn how to use the Kafka node in n8n. Follow technical documentation to integrate Kafka node into your workflows.\ncontentType: [integration, reference]\npriority: medium\n---\n\n# Kafka node\n\nUse the Kafka node to automate work in Kafka, and integrate Kafka with other applications. n8n has built-in support for a wide range of Kafka features, including sending messages. \n\nOn this page, you'll find a list of operations the Kafka node supports and links to more resources.\n\n/// note | Credentials\nRefer to [Kafka credentials](/integrations/builtin/credentials/kafka.md) for guidance on setting up authentication. \n///\n\n--8<-- \"_snippets/integrations/builtin/app-nodes/ai-tools.md\"\n\n## Operations\n\n- Send message\n\n## Templates and examples\n\n<!-- see https://www.notion.so/n8n/Pull-in-templates-for-the-integrations-pages-37c716837b804d30a33b47475f6e3780 -->\n[[ templatesWidget(page.title, 'kafka') ]]\n",
  "properties_schema": [
    {
      "displayName": "Topic",
      "name": "topic",
      "type": "string",
      "default": "",
      "description": "Name of the queue of topic to publish to"
    },
    {
      "displayName": "Send Input Data",
      "name": "sendInputData",
      "type": "boolean",
      "default": true,
      "description": "Whether to send the data the node receives as JSON to Kafka"
    },
    {
      "displayName": "Message",
      "name": "message",
      "type": "string",
      "default": "",
      "description": "The message to be sent",
      "displayOptions": {
        "show": {
          "sendInputData": [
            false
          ]
        }
      }
    },
    {
      "displayName": "JSON Parameters",
      "name": "jsonParameters",
      "type": "boolean",
      "default": false
    },
    {
      "displayName": "Use Schema Registry",
      "name": "useSchemaRegistry",
      "type": "boolean",
      "default": false,
      "description": "Whether to use Confluent Schema Registry"
    },
    {
      "displayName": "Schema Registry URL",
      "name": "schemaRegistryUrl",
      "type": "string",
      "default": "",
      "description": "URL of the schema registry",
      "required": true,
      "displayOptions": {
        "show": {
          "useSchemaRegistry": [
            true
          ]
        }
      }
    },
    {
      "displayName": "Use Key",
      "name": "useKey",
      "type": "boolean",
      "default": false,
      "description": "Whether to use a message key"
    },
    {
      "displayName": "Key",
      "name": "key",
      "type": "string",
      "default": "",
      "description": "The message key",
      "required": true,
      "displayOptions": {
        "show": {
          "useKey": [
            true
          ]
        }
      }
    },
    {
      "displayName": "Event Name",
      "name": "eventName",
      "type": "string",
      "default": "",
      "description": "Namespace and Name of Schema in Schema Registry (namespace.name)",
      "required": true,
      "displayOptions": {
        "show": {
          "useSchemaRegistry": [
            true
          ]
        }
      }
    },
    {
      "displayName": "Headers",
      "name": "headersUi",
      "type": "fixedCollection",
      "default": {},
      "options": [
        {
          "name": "headerValues",
          "displayName": "Header",
          "values": [
            {
              "displayName": "Key",
              "name": "key",
              "type": "string",
              "default": ""
            },
            {
              "displayName": "Value",
              "name": "value",
              "type": "string",
              "default": ""
            }
          ]
        }
      ],
      "displayOptions": {
        "show": {
          "jsonParameters": [
            false
          ]
        }
      },
      "typeOptions": {
        "multipleValues": true
      }
    },
    {
      "displayName": "Headers (JSON)",
      "name": "headerParametersJson",
      "type": "json",
      "default": "",
      "description": "Header parameters as JSON (flat object)",
      "displayOptions": {
        "show": {
          "jsonParameters": [
            true
          ]
        }
      }
    },
    {
      "displayName": "Options",
      "name": "options",
      "type": "collection",
      "default": {},
      "options": [
        {
          "displayName": "Acks",
          "name": "acks",
          "type": "boolean",
          "default": false,
          "description": "Whether or not producer must wait for acknowledgement from all replicas"
        },
        {
          "displayName": "Compression",
          "name": "compression",
          "type": "boolean",
          "default": false,
          "description": "Whether to send the data in a compressed format using the GZIP codec"
        },
        {
          "displayName": "Timeout",
          "name": "timeout",
          "type": "number",
          "default": 30000,
          "description": "The time to await a response in ms"
        }
      ]
    }
  ],
  "operations": [],
  "credentials_required": [
    {
      "name": "kafka",
      "required": true,
      "testedBy": "kafkaConnectionTest"
    }
  ],
  "updated_at": "2025-07-06 13:14:51",
  "generated_at": "2025-07-23T03:58:15.685Z",
  "api_version": "1.0.0"
}