{
  "node_type": "nodes-base.graphql",
  "package_name": "n8n-nodes-base",
  "display_name": "GraphQL",
  "description": "Makes a GraphQL request and returns the received data",
  "category": "input",
  "development_style": "programmatic",
  "is_ai_tool": 1,
  "is_trigger": 0,
  "is_webhook": 0,
  "is_versioned": 1,
  "version": "1.1",
  "documentation": "---\n#https://www.notion.so/n8n/Frontmatter-432c2b8dff1f43d4b1c8d20075510fe4\ntitle: GraphQL\ndescription: Documentation for the GraphQL node in n8n, a workflow automation platform. Includes guidance on usage, and links to examples.\ncontentType: [integration, reference]\npriority: medium\n---\n\n# GraphQL\n\n[GraphQL](https://graphql.org/){:target=_blank .external-link} is an open-source data query and manipulation language for APIs, and a runtime for fulfilling queries with existing data. Use the GraphQL node to query a GraphQL endpoint.\n\n## Node parameters\n\n--8<-- \"_snippets/integrations/builtin/app-nodes/ai-tools.md\"\n\n### Authentication\n\nSelect the type of authentication to use.\n\nIf you select anything other than **None**, the **Credential for <selected-auth-type>** parameter appears for you to select an existing or create a new authentication credential for that authentication type.\n\n### HTTP Request Method\n\nSelect the underlying HTTP Request method the node should use. Choose from:\n\n* **GET**\n* **POST**: If you select this method, you'll also need to select the **Request Format** the node should use for the query payload. Choose from:\n    * **GraphQL (Raw)**\n    * **JSON**\n\n### Endpoint\n\nEnter the GraphQL Endpoint you'd like to hit.\n\n### Ignore SSL Issues\n\nWhen you turn on this control, n8n ignores SSL certificate validation failure.\n\n### Query\n\nEnter the GraphQL query you want to execute.\n\nRefer to [Related Resources](#related-resources) for information on writing your query.\n\n### Response Format\n\nSelect the format you'd like to receive query results in. Choose between:\n\n* **JSON**\n* **String**: If you select this format, enter a **Response Data Property Name** to define the property the string is written to.\n\n## Headers\n\nEnter any **Headers** you want to pass as part of the query as **Name** / **Value** pairs.\n\n## Templates and examples\n\n<!-- see https://www.notion.so/n8n/Pull-in-templates-for-the-integrations-pages-37c716837b804d30a33b47475f6e3780 -->\n[[ templatesWidget(page.title, 'graphql') ]]\n\n## Related resources\n\nTo use the GraphQL node, you need to understand GraphQL query language. GraphQL have their own [Introduction to GraphQL](https://graphql.org/learn/){:target=_blank .external-link} tutorial.\n\n",
  "properties_schema": [
    {
      "displayName": "Authentication",
      "name": "authentication",
      "type": "options",
      "default": "none",
      "description": "The way to authenticate",
      "options": [
        {
          "name": "Basic Auth",
          "value": "basicAuth"
        },
        {
          "name": "Custom Auth",
          "value": "customAuth"
        },
        {
          "name": "Digest Auth",
          "value": "digestAuth"
        },
        {
          "name": "Header Auth",
          "value": "headerAuth"
        },
        {
          "name": "None",
          "value": "none"
        },
        {
          "name": "OAuth1",
          "value": "oAuth1"
        },
        {
          "name": "OAuth2",
          "value": "oAuth2"
        },
        {
          "name": "Query Auth",
          "value": "queryAuth"
        }
      ]
    },
    {
      "displayName": "HTTP Request Method",
      "name": "requestMethod",
      "type": "options",
      "default": "POST",
      "description": "The underlying HTTP request method to use",
      "options": [
        {
          "name": "GET",
          "value": "GET"
        },
        {
          "name": "POST",
          "value": "POST"
        }
      ]
    },
    {
      "displayName": "Endpoint",
      "name": "endpoint",
      "type": "string",
      "default": "",
      "description": "The GraphQL endpoint",
      "required": true
    },
    {
      "displayName": "Ignore SSL Issues (Insecure)",
      "name": "allowUnauthorizedCerts",
      "type": "boolean",
      "default": false,
      "description": "Whether to download the response even if SSL certificate validation is not possible"
    },
    {
      "displayName": "Request Format",
      "name": "requestFormat",
      "type": "options",
      "default": "graphql",
      "description": "The format for the query payload",
      "options": [
        {
          "name": "GraphQL (Raw)",
          "value": "graphql"
        },
        {
          "name": "JSON",
          "value": "json"
        }
      ],
      "required": true,
      "displayOptions": {
        "show": {
          "requestMethod": [
            "POST"
          ],
          "@version": [
            1
          ]
        }
      }
    },
    {
      "displayName": "Request Format",
      "name": "requestFormat",
      "type": "options",
      "default": "json",
      "description": "The request format for the query payload",
      "options": [
        {
          "name": "JSON (Recommended)",
          "value": "json",
          "description": "JSON object with query, variables, and operationName properties. The standard and most widely supported format for GraphQL requests."
        },
        {
          "name": "GraphQL (Raw)",
          "value": "graphql",
          "description": "Raw GraphQL query string. Not all servers support this format. Use JSON for better compatibility."
        }
      ],
      "required": true,
      "displayOptions": {
        "show": {
          "requestMethod": [
            "POST"
          ],
          "@version": [
            {
              "_cnd": {
                "gte": 1.1
              }
            }
          ]
        }
      }
    },
    {
      "displayName": "Query",
      "name": "query",
      "type": "string",
      "default": "",
      "description": "GraphQL query",
      "required": true,
      "typeOptions": {
        "rows": 6
      }
    },
    {
      "displayName": "Variables",
      "name": "variables",
      "type": "json",
      "default": "",
      "description": "Query variables as JSON object",
      "displayOptions": {
        "show": {
          "requestFormat": [
            "json"
          ],
          "requestMethod": [
            "POST"
          ]
        }
      }
    },
    {
      "displayName": "Operation Name",
      "name": "operationName",
      "type": "string",
      "default": "",
      "description": "Name of operation to execute",
      "displayOptions": {
        "show": {
          "requestFormat": [
            "json"
          ],
          "requestMethod": [
            "POST"
          ]
        }
      }
    },
    {
      "displayName": "Response Format",
      "name": "responseFormat",
      "type": "options",
      "default": "json",
      "description": "The format in which the data gets returned from the URL",
      "options": [
        {
          "name": "JSON",
          "value": "json"
        },
        {
          "name": "String",
          "value": "string"
        }
      ]
    },
    {
      "displayName": "Response Data Property Name",
      "name": "dataPropertyName",
      "type": "string",
      "default": "data",
      "description": "Name of the property to which to write the response data",
      "required": true,
      "displayOptions": {
        "show": {
          "responseFormat": [
            "string"
          ]
        }
      }
    },
    {
      "displayName": "Headers",
      "name": "headerParametersUi",
      "type": "fixedCollection",
      "default": {},
      "description": "The headers to send",
      "options": [
        {
          "name": "parameter",
          "displayName": "Header",
          "values": [
            {
              "displayName": "Name",
              "name": "name",
              "type": "string",
              "default": "",
              "description": "Name of the header"
            },
            {
              "displayName": "Value",
              "name": "value",
              "type": "string",
              "default": "",
              "description": "Value to set for the header"
            }
          ]
        }
      ],
      "typeOptions": {
        "multipleValues": true
      }
    }
  ],
  "operations": [],
  "credentials_required": [
    {
      "name": "httpBasicAuth",
      "required": true,
      "displayOptions": {
        "show": {
          "authentication": [
            "basicAuth"
          ]
        }
      }
    },
    {
      "name": "httpCustomAuth",
      "required": true,
      "displayOptions": {
        "show": {
          "authentication": [
            "customAuth"
          ]
        }
      }
    },
    {
      "name": "httpDigestAuth",
      "required": true,
      "displayOptions": {
        "show": {
          "authentication": [
            "digestAuth"
          ]
        }
      }
    },
    {
      "name": "httpHeaderAuth",
      "required": true,
      "displayOptions": {
        "show": {
          "authentication": [
            "headerAuth"
          ]
        }
      }
    },
    {
      "name": "httpQueryAuth",
      "required": true,
      "displayOptions": {
        "show": {
          "authentication": [
            "queryAuth"
          ]
        }
      }
    },
    {
      "name": "oAuth1Api",
      "required": true,
      "displayOptions": {
        "show": {
          "authentication": [
            "oAuth1"
          ]
        }
      }
    },
    {
      "name": "oAuth2Api",
      "required": true,
      "displayOptions": {
        "show": {
          "authentication": [
            "oAuth2"
          ]
        }
      }
    }
  ],
  "updated_at": "2025-07-06 13:14:51",
  "generated_at": "2025-07-23T03:58:15.685Z",
  "api_version": "1.0.0"
}